

test {
    ignoreFailures = false
}

checkstyle {
    toolVersion '8.36.1'
}

checkstyleMain {
    ignoreFailures = false
}

checkstyleTest {
    ignoreFailures = true
}


pmdMain {
    ignoreFailures = false
    ruleSets = []
    ruleSetFiles = files("${project.projectDir}/config/pmd/pmd-ruleset.xml")
    excludes = ['BeanMembersShouldSerialize', 'LoosePackageCoupling']
}

pmdTest {
    ignoreFailures = true
    ruleSets = []
    ruleSetFiles = files("${project.projectDir}/config/pmd/pmd-ruleset.xml")
    excludes = ['BeanMembersShouldSerialize', 'LoosePackageCoupling']
}

jacoco {
    toolVersion = "0.8.7"
}
jacocoTestReport {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['ai/qodo/cover/plugin/CoverAgentPlugin',
                                        'ai/qodo/cover/plugin/CoverAgentTask',
                                        'ai/qodo/cover/plugin/CoverAgent',
                                        'ai/qodo/cover/plugin/CoverAgentBuilder',
                                        'ai/qodo/cover/plugin/CoverAgentExtension',
                                        'ai/qodo/cover/plugin/CoverError',
                                        'ai/qodo/cover/plugin/ModelPrompter',
                                        'ai/qodo/cover/plugin/SourceFilePrompt',
                                        'ai/qodo/cover/plugin/TestInfoResponse',
                                        'ai/qodo/cover/plugin/CoverAgentExecutor'])
        }))
    }
    reports {
        xml.required.set(true) // Instead of xml.enabled = false
        html.required.set(true)  // Instead of html.enabled = true
        html.outputLocation.set(file("${buildDir}/jacocoHtml")) // Instead of html.destination
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            excludes = [
                    'ai.qodo.cover.plugin.CoverAgentPlugin',
                    'ai.qodo.cover.plugin.CoverAgentTask',
                    'sun.util.resources.cldr.provider.CLDRLocaleDataMetaInfo',
                    'ai.qodo.cover.plugin.CoverAgent',
                    'ai.qodo.cover.plugin.CoverAgentBuilder',
                    'ai.qodo.cover.plugin.CoverAgentExtension',
                    'ai.qodo.cover.plugin.CoverError',
                    'ai.qodo.cover.plugin.ModelPrompter',
                    'ai.qodo.cover.plugin.SourceFilePrompt',
                    'ai.qodo.cover.plugin.TestInfoResponse',
                    'ai.qodo.cover.plugin.CoverAgentExecutor'

            ]
            element = 'CLASS'
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = new Double(classCoverage)
            }
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = new Double(branchCoverage)
            }
        }
    }
}

check.finalizedBy jacocoTestReport, jacocoTestCoverageVerification