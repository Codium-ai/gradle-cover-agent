import com.github.spotbugs.snom.Effort
import com.github.spotbugs.snom.Confidence
plugins {
    id 'groovy'
    id 'java-gradle-plugin'
    id 'jacoco'
    id 'checkstyle'
    id 'pmd'
    id "com.github.spotbugs" version "6.0.21"
    id "com.gradle.plugin-publish" version "1.3.0"
    id 'signing'
    id 'com.gradleup.shadow' version '8.3.2'
}

group = 'ai.qodo'
version = '0.0.1'

repositories {
    gradlePluginPortal()
    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

spotbugs {
    effort = Effort.LESS
    reportLevel = Confidence.valueOf('HIGH')
}

dependencies {
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'dev.langchain4j:langchain4j-open-ai:0.33.0'
    implementation 'dev.langchain4j:langchain4j:0.33.0'
    implementation 'dev.langchain4j:langchain4j-embeddings-all-minilm-l6-v2:0.33.0'
    implementation 'org.tinylog:tinylog-impl:2.6.2'
    implementation 'org.tinylog:slf4j-tinylog:2.6.2'

    testImplementation 'org.spockframework:spock-core:2.0-groovy-3.0'
}

gradlePlugin {
    plugins {
        website = 'https://github.com/Codium-ai/gradle-cover-agent'
        vcsUrl = 'https://github.com/Codium-ai/gradle-cover-agent.git'
        coverAgent {
            id = 'ai.qodo.plugin.cover-agent'
            implementationClass = 'ai.qodo.cover.plugin.CoverAgentPlugin'
            displayName = 'Cover Agent Plugin'
            description = 'A plugin to use Cover Agent in Gradle. https://github.com/Codium-ai/cover-agent?tab=readme-ov-file#installation-and-usage'
            tags.addAll('cover-agent', 'code-quality', 'unit-testing')

        }
    }
}
tasks.named('shadowJar', com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    archiveBaseName.set('shadow')
    archiveClassifier.set('')
    archiveVersion.set('')
}

tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
    reports {
        html.required.set(true)
        html.outputLocation.set(file("$rootDir/build/reports/spotbugs/spotbugs.html"))
    }
}

test {
    useJUnitPlatform()
    jacoco {
        excludes = ['sun/util/resources/cldr/provider/CLDRLocaleDataMetaInfo']
    }
}

test {
    ignoreFailures = false
}


checkstyle {
    toolVersion = '10.0'  // Use the version you want
    configFile = file("$rootDir/config/checkstyle/checkstyle.xml")
}

checkstyleMain {
    ignoreFailures = false
}

checkstyleTest {
    ignoreFailures = true
}



pmdMain {
    ignoreFailures = false
    ruleSets = []
    ruleSetFiles = files("${rootDir}/config/pmd/pmd-ruleset.xml")
    excludes = ['BeanMembersShouldSerialize', 'LoosePackageCoupling']
}

pmdTest {
    ignoreFailures = true
    ruleSets = []
    ruleSetFiles = files("${rootDir}/config/pmd/pmd-ruleset.xml")
    excludes = ['BeanMembersShouldSerialize', 'LoosePackageCoupling']
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            excludes = [
                    'ai.qodo.cover.plugin.CoverAgentPlugin',
                    'ai.qodo.cover.plugin.CoverAgentTask',
                    'sun.util.resources.cldr.provider.CLDRLocaleDataMetaInfo'
            ]
            element = 'CLASS'
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = new Double(classCoverage)
            }
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = new Double(branchCoverage)
            }
        }
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required.set(true)
        xml.outputLocation.set(file("$rootDir/build/customJacocoReportDir/jacocoTestReport.xml"))
        csv.required.set(false)
        html.required.set(true)
        html.outputLocation.set(file("$rootDir/build/customJacocoReportDir/html"))
    }
}

task cleanTopBuild(type: Delete) {
    delete "$rootDir/build"
}


spotbugsMain {
    ignoreFailures = false
    dependsOn compileJava
}

spotbugsTest {
    ignoreFailures = true
}


check.finalizedBy jacocoTestReport, jacocoTestCoverageVerification


